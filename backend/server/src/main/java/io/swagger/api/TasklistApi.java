
package io.swagger.api;

import io.swagger.model.ModelApiResponse;
import io.swagger.model.Task;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-12-20T11:00:35.176Z")
@Api(value = "tasklist", description = "the tasklist API")
@RequestMapping(value = "/v2")
public interface TasklistApi {

    @ApiOperation(value = "Add a new task to the list", nickname = "addTask", notes = "Adds a new task to the list. Returns the created task.", response = Task.class, tags={ "tasklist", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Task succesfully created", response = Task.class),
        @ApiResponse(code = 400, message = "Invalid task name", response = ModelApiResponse.class),
        @ApiResponse(code = 406, message = "Invalid header", response = ModelApiResponse.class)})
    @RequestMapping(value = "/tasklist/new",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<? extends Object> addTask(@ApiParam(value = "Task object with a valid task name. (Not null or blank)" ,required=true )  @Valid @RequestBody Task newTask);


    @ApiOperation(value = "Delete a task from the list", nickname = "deleteTask", notes = "Delete a task.", tags={ "tasklist", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK, task deleted."),
        @ApiResponse(code = 404, message = "Invalid taskID", response = ModelApiResponse.class)})
    @RequestMapping(value = "/tasklist/remove/{taskID}",
        method = RequestMethod.DELETE)
    ResponseEntity<? extends Object> deleteTask(@DecimalMin("1")@ApiParam(value = "Task with the id to delete",required=true) @PathVariable("taskID") String taskID);


    @ApiOperation(value = "Get the tasklist", nickname = "getTasks", notes = "Returns the tasks from the list.", response = Task.class, responseContainer = "List", tags={ "tasklist", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Task.class, responseContainer = "List"),
        @ApiResponse(code = 406, message = "Invalid header", response = ModelApiResponse.class)})
    @RequestMapping(value = "/tasklist",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<? extends Object> getTasks();


    @ApiOperation(value = "Update a task", nickname = "updateTask", notes = "Updates a task. Returns the updated task.", tags={ "tasklist", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK, task updated", response = Task.class),
        @ApiResponse(code = 400, message = "Invalid input", response = ModelApiResponse.class),
        @ApiResponse(code = 406, message = "Invalid header", response = ModelApiResponse.class)})
    @RequestMapping(value = "/tasklist/update",
        consumes = { "application/json" },
        produces = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<? extends  Object> updateTask(@ApiParam(value = "Task object with changed data. Invalid properties will not be changed. E.g.: blank taskName." ,required=true )  @Valid @RequestBody Task updatedTask);

}
